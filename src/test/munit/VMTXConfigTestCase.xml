<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <munit:config name="VMTXConfigTestCase.xml" />

<!--    <munit:test name="vmTxConfiguration" description="Publish In Tx" >-->
<!--        <munit:enable-flow-sources>-->
<!--            <munit:enable-flow-source value="listenerTransientQueue"/>-->
<!--        </munit:enable-flow-sources>-->
<!--        <munit:execution>-->
<!--            <set-variable value="#['message result']" variableName="message" />-->
<!--            <try transactionalAction="BEGIN_OR_JOIN">-->
<!--                <vm:publish queueName="transientQueue" config-ref="VM_Config"/>-->
<!--                <ee:transform>-->
<!--                    <ee:message >-->
<!--                        <ee:set-payload >-->
<!--                            <![CDATA[%dw 2.0-->
<!--output application/json-->
<!-- -&#45;&#45;-->
<!--vars.message-->
<!--]]>-->
<!--                        </ee:set-payload>-->
<!--                    </ee:message>-->
<!--                </ee:transform>-->
<!--                <error-handler>-->
<!--                    <on-error-continue enableNotifications="true" logException="false" type="VM:QUEUE_TIMEOUT" />-->
<!--                </error-handler>-->
<!--            </try>-->
<!--            <set-payload value="#[vars.message]"/>-->
<!--            <logger level="INFO" doc:name="Logger"/>-->
<!--        </munit:execution>-->
<!--        <munit:validation>-->
<!--            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::equalTo(vars.message)]"/>-->
<!--        </munit:validation>-->
<!--    </munit:test>-->

<!--    <flow name="listenerTransientQueue" initialState="stopped">-->
<!--        <vm:listener queueName="transientQueue" numberOfConsumers="1" transactionalAction="ALWAYS_BEGIN" config-ref="VM_Config" />-->
<!--        <munit-tools:queue/>-->
<!--    </flow>-->

<!--    <munit:test name="vmTxTransientConfiguration" description="Publish In Tx">-->
<!--        <munit:enable-flow-sources>-->
<!--            <munit:enable-flow-source value="listenertransientQueue"/>-->
<!--        </munit:enable-flow-sources>-->
<!--        <munit:execution>-->
<!--            <set-variable variableName="message" value="#['FAIL']"/>-->
<!--            <try transactionalAction="BEGIN_OR_JOIN" >-->
<!--                <vm:publish queueName="transientQueue" config-ref="VM_Config" >-->
<!--                    <vm:content >#[{txAction : 'ROLLBACK'}]-->
<!--                    </vm:content>-->
<!--                </vm:publish>-->
<!--                <ee:transform>-->
<!--                    <ee:message >-->
<!--                        <ee:set-payload ><![CDATA[%dw 2.0-->
<!--output application/json-->
<!-- -&#45;&#45;-->
<!--vars.message-->
<!--]]></ee:set-payload>-->
<!--                    </ee:message>-->
<!--                </ee:transform>-->
<!--            </try>-->
<!--        </munit:execution>-->
<!--        <munit:validation>-->
<!--            <until-successful maxRetries="5" millisBetweenRetries="5000">-->
<!--                <logger message="#[MunitTools::queueSize()]" level="ERROR"/>-->
<!--                <munit-tools:assert-that expression="#[MunitTools::queueSize()]" is="#[MunitTools::equalTo(1)]"/>-->
<!--                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::notNullValue()]"/>-->
<!--            </until-successful>-->
<!--        </munit:validation>-->
<!--    </munit:test>-->

<!--    <flow name="listenertransientQueue" initialState="stopped">-->
<!--        <vm:listener queueName="transientQueue" numberOfConsumers="1" transactionalAction="ALWAYS_BEGIN" config-ref="VM_Config" />-->
<!--        <flow-ref name="test"/>-->
<!--    </flow>-->

<!--    <flow name="test" initialState="stopped">-->
<!--        <async>-->
<!--            <logger level="DEBUG" message="#[output application/json -&#45;&#45; payload]"/>-->
<!--            <munit-tools:queue/>-->
<!--        </async>-->
<!--        <choice>-->
<!--            <when expression="#[payload.txAction == 'ROLLBACK']">-->
<!--                <raise-error type="MULE:ANY" description="tx raise error"/>-->
<!--            </when>-->
<!--        </choice>-->
<!--    </flow>-->




<!--    <munit:test name="publishAndThenConsumeExplicitReplyDestinationInTransaction">-->
<!--        <munit:enable-flow-sources>-->
<!--            <munit:enable-flow-source value="devQueue2Listener"/>-->
<!--        </munit:enable-flow-sources>-->
<!--        <munit:execution>-->
<!--            <try transactionalAction="BEGIN_OR_JOIN" >-->
<!--            <foreach collection="#[1 to 200]">-->
<!--                <async>-->
<!--                    <vm:publish queueName="transientQueue" config-ref="VM_Config" >-->
<!--                    </vm:publish>-->
<!--                </async>-->
<!--            </foreach>-->
<!--            </try>-->
<!--        </munit:execution>-->
<!--        <munit:validation>-->
<!--            <until-successful maxRetries="5" millisBetweenRetries="1000">-->
<!--                <munit-tools:assert-that expression="#[MunitTools::queueSize()]" is="#[MunitTools::equalTo(200)]"/>-->
<!--            </until-successful>-->
<!--        </munit:validation>-->
<!--    </munit:test>-->


<!--    <flow name="devQueue2Listener">-->
<!--        <vm:listener queueName="transientQueue" numberOfConsumers="1" transactionalAction="ALWAYS_BEGIN" config-ref="VM_Config" />-->
<!--        <munit-tools:queue />-->
<!--    </flow>-->


    <munit:test name="multipleMessagesOnListener">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="listenerFlow"/>
        </munit:enable-flow-sources>
        <munit:execution>
            <set-variable value="#[2000]" variableName="numberOfMessages"/>
            <foreach collection="#[1 to vars.numberOfMessages]">
                <set-payload value="#['message number $(payload)']"/>
                <vm:publish queueName="transientVMQueue" config-ref="VM_ConfigTimeOut" />
            </foreach>
        </munit:execution>
        <munit:validation>
            <try transactionalAction="BEGIN_OR_JOIN">
                <until-successful maxRetries="10" millisBetweenRetries="1000">
                    <munit-tools:assert-that expression="#[MunitTools::queueSize()]" is="#[MunitTools::equalTo(vars.numberOfMessages)]"/>
                </until-successful>
                <error-handler>
                    <on-error-propagate type="ANY">
                        <munit-tools:fail message="#['Stressed listener should have received $(vars.numberOfMessages) messages but received $(MunitTools::queueSize())']"/>
                    </on-error-propagate>
                </error-handler>
            </try>
        </munit:validation>
    </munit:test>

    <flow name="listenerFlow" initialState="stopped">
        <vm:listener queueName="transientVMQueue" transactionalAction="ALWAYS_BEGIN" numberOfConsumers="1" config-ref="VM_ConfigTimeOut" />
        <logger message="#['Listener : $(payload)']" level="DEBUG"/>
        <munit-tools:queue/>
    </flow>
</mule>