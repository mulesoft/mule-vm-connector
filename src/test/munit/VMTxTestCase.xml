<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
        xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
        xmlns="http://www.mulesoft.org/schema/mule/core"
        xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
        xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
        xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <munit:config name="VMTxTestCase.xml" >
        <munit:parameterizations>
            <munit:parameterization name="transientQueueType">
                <munit:parameters>
                    <munit:parameter propertyName="queueName" value="transientQueue"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="persistentQueueType">
                <munit:parameters>
                    <munit:parameter propertyName="queueName" value="persistentQueue"/>
                </munit:parameters>
            </munit:parameterization>
        </munit:parameterizations>
    </munit:config>

    <munit:test name="publish-commit-test" description="Test the publish commit scenario">
        <munit:enable-flow-sources >
            <munit:enable-flow-source value="vm-listener-queue-flow" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="fail" value="#[false]" />
        </munit:behavior>
        <munit:execution>
            <flow-ref name="VM_publishInTx"/>
            <until-successful maxRetries="10"  millisBetweenRetries="2000">
                <munit-tools:retrieve key="listenerData" />
            </until-successful>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload.payload]"
                                     is="#[MunitTools::equalTo('Hello')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="publish-rollback-test" expectedErrorType="MUNIT-TOOLS:MISSING_KEY" description="Test the publish rollback scenario">
        <munit:enable-flow-sources >
            <munit:enable-flow-source value="vm-listener-queue-flow" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-variable variableName="fail" value="#[true]" />
        </munit:behavior>
        <munit:execution>
            <try>
                <flow-ref name="VM_publishInTx"/>
                <error-handler>
                    <on-error-continue type="ANY:EXPECTED_ERROR_RAISED"/>
                </error-handler>
            </try>
            <until-successful maxRetries="5"  millisBetweenRetries="2000">
                <munit-tools:retrieve key="listenerData" />
            </until-successful>
        </munit:execution>
    </munit:test>

    <flow name="vm-listener-queue-flow">
        <vm:listener config-ref="VM_Config" queueName="${queueName}"/>
        <munit-tools:store key="listenerData">
            <munit-tools:value ><![CDATA[#[
            output application/json
            ---
            {
                "payload": payload,
                "payloadMimeType": payload.^mimeType,
                "payloadClassType": payload.^class,
                "attributes": message.attributes,
                "attributesClassType": message.attributes.^class
            }
            ]]]></munit-tools:value>
        </munit-tools:store>
    </flow>

    <flow name="VM_publishInTx">
        <try transactionalAction="BEGIN_OR_JOIN">
            <vm:publish queueName="${queueName}" config-ref="VM_Config">
                <vm:content>#["Hello"]</vm:content>
            </vm:publish>
            <flow-ref name="VM_fail" />
            <error-handler>
                <on-error-propagate type="ANY:EXPECTED_ERROR_RAISED"/>
            </error-handler>
        </try>
    </flow>

    <sub-flow name="VM_fail">
        <choice>
            <when expression="#[vars.fail]">
                <raise-error type="ANY:EXPECTED_ERROR_RAISED" />
            </when>
        </choice>
    </sub-flow>

</mule>
